;; Analyzed by ClojureScript 1.7.170
{:use-macros {defui om.next}, :excludes #{}, :name om-tutorial.core, :imports nil, :requires {gdom goog.dom, goog.dom goog.dom, om om.next, om.next om.next, dom om.dom, om.dom om.dom, cljs.pprint cljs.pprint}, :uses {pprint cljs.pprint}, :defs {read {:protocol-inline nil, :meta {:file "/home/paul/projects/test/src/om_tutorial/core.cljs", :line 9, :column 7, :end-line 9, :end-column 11, :arglists (quote ([{:keys [state], :as env} key params]))}, :name om-tutorial.core/read, :variadic false, :file "src/om_tutorial/core.cljs", :end-column 11, :method-params ([p__31278 key params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [state], :as env} key params]))}, state {:name om-tutorial.core/state, :file "src/om_tutorial/core.cljs", :line 17, :column 1, :end-line 17, :end-column 11, :meta {:file "/home/paul/projects/test/src/om_tutorial/core.cljs", :line 17, :column 6, :end-line 17, :end-column 11}}, BarNode {:protocol-inline nil, :meta {:jsdoc ["@constructor"], :arglists (quote ([])), :file nil}, :name om-tutorial.core/BarNode, :variadic false, :file "src/om_tutorial/core.cljs", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :jsdoc ["@constructor"]}, FooNode {:protocol-inline nil, :meta {:jsdoc ["@constructor"], :arglists (quote ([])), :file nil}, :name om-tutorial.core/FooNode, :variadic false, :file "src/om_tutorial/core.cljs", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :jsdoc ["@constructor"]}, ItemNode {:protocol-inline nil, :meta {:jsdoc ["@constructor"], :arglists (quote ([])), :file nil}, :name om-tutorial.core/ItemNode, :variadic false, :file "src/om_tutorial/core.cljs", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :jsdoc ["@constructor"]}, Tree {:protocol-inline nil, :meta {:jsdoc ["@constructor"], :arglists (quote ([])), :file nil}, :name om-tutorial.core/Tree, :variadic false, :file "src/om_tutorial/core.cljs", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :jsdoc ["@constructor"]}, reconciler {:name om-tutorial.core/reconciler, :file "src/om_tutorial/core.cljs", :line 70, :column 1, :end-line 70, :end-column 16, :meta {:file "/home/paul/projects/test/src/om_tutorial/core.cljs", :line 70, :column 6, :end-line 70, :end-column 16}}}, :require-macros {om om.next, om.next om.next, dom om.dom, om.dom om.dom, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:node/bar :children :foo/value :tree :read :om.next/queries :config :value :state :node/type :children-2 :ref->components :parser :not-found :id :indexer :indexes ... :node/foo :bar/value}, :order [:state :value :not-found :tree :id :node/type :foo/value :children :children-2 :node/foo :bar/value :node/bar :config :indexer :indexes :ref->components :om.next/queries ... :parser :read]}, :doc nil}